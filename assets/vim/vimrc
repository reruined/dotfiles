call plug#begin('~/.vim/plugged')
"Plug 'https://github.com/SirVer/ultisnips.git'
"Plug 'https://github.com/StanAngeloff/php.vim.git'
"Plug 'https://github.com/mxw/vim-jsx.git'
"Plug 'https://github.com/othree/html5.vim.git'
"Plug 'https://github.com/pangloss/vim-javascript.git'
"Plug 'https://github.com/tikhomirov/vim-glsl.git'
"Plug 'https://github.com/xolox/vim-easytags.git'
Plug 'Valloric/YouCompleteMe'
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'editorconfig/editorconfig-vim'
Plug 'groenewege/vim-less'
Plug 'majutsushi/tagbar'
Plug 'morhetz/gruvbox'
Plug 'mtscout6/syntastic-local-eslint.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'sjl/gundo.vim'
Plug 'tikhomirov/vim-glsl'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'valloric/YouCompleteMe'
Plug 'valloric/listtoggle'
call plug#end()

" Basics
set backspace=indent,eol,start
set exrc
set hidden
set lazyredraw
set nocompatible

" editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" ctrlp
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_switch_buffer = 0

" syntastic
let g:syntastic_debug = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_css_checkers = ['stylelint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 10

" javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,angularjs'

" Enable filetype detection
filetype plugin indent on

" Sign column
set signcolumn=yes

" Enable mouse
set mouse=a

" Show partial commands
set showcmd

" Always show status line
set laststatus=2

" Better command-line completion
set wildmenu
set wildmode=longest,full

" Better completion
set omnifunc=syntaxcomplete#Complete

" Color scheme
set t_Co=256
set background=dark
colo gruvbox

" Swap
set swapfile
set directory=$HOME/.vim/swp//
call system('mkdir ' . &directory)

" Backup
set backup
set backupdir=$HOME/.vim/bak//
call system('mkdir ' . &backupdir)

" Undo
set undofile
set undodir=$HOME/.vim/undo//
set undolevels=1000
set undoreload=10000
call system('mkdir ' . &undodir)

" Longer history
set history=10000

" Detect changes from outside of vim
set autoread

" No timeout when cancelling command
set notimeout
set ttimeout
set ttimeoutlen=10

" Simple search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Relative line numbers
set number
set relativenumber
set numberwidth=6

" Highlight column
set colorcolumn=80

" Highlight current line, and change color in insert mode
set cursorline
augroup modehighlight
    autocmd!
    autocmd InsertEnter * :hi CursorLine ctermbg=16 | :hi CursorLineNr ctermbg=16
    autocmd InsertLeave * :hi CursorLine ctermbg=237 | :hi CursorLineNr ctermbg=237
augroup END

" YCM
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_global_ycm_extra_conf = $HOME.'/.vim/.ycm_extra_conf.py'

""" 
""" Mappings
""" --------------------------------------------

" Remap 0 (line start) and $ (line end) to H and L
nnoremap H 0
nnoremap L $
vnoremap H 0
vnoremap L $
nnoremap 0 <nop>
nnoremap $ <nop>

" Simpler mappings for navigating between and moving splits
nnoremap <silent> <c-h> :wincmd h<cr>
nnoremap <silent> <c-j> :wincmd j<cr>
nnoremap <silent> <c-k> :wincmd k<cr>
nnoremap <silent> <c-l> :wincmd l<cr>
nnoremap <silent> <M-left> :wincmd H<cr>
nnoremap <silent> <M-right> :wincmd L<cr>
nnoremap <silent> <M-up> :wincmd K<cr>
nnoremap <silent> <M-down> :wincmd J<cr>

" Disable arrow keys and Ctrl-C for interactive mode
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap  <nop>

" Set mapleader to space
let mapleader = "\<space>"
"nnoremap <space> <nop>

" Quick access to vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" EasyMotion
map <Leader> <Plug>(easymotion-prefix)

" Tagbar
nnoremap <silent> <F8> :TagbarToggle<cr>

" CtrlPTag
nnoremap <silent> <leader>p :CtrlPTag<cr>
nnoremap <silent> <F2> :CtrlPBufTag<cr>

" Test
nnoremap Ã¤ <C-\s>

" YCM
nnoremap <F9> :YcmCompleter FixIt<cr>
nnoremap <silent> <leader>go :YcmCompleter GoTo<cr>
nnoremap <silent> <leader>gt :YcmCompleter GetType<cr>
nnoremap <silent> <leader>gd :YcmCompleter GoToDeclaration<cr>

" Use dash and underscore to quickly move a line/selection up or down
nnoremap _ ddp==
nnoremap - ddkP==
vnoremap - <esc>`<kdd`>p`<v`>
vnoremap _ <esc>`>jdd`<P`<v`>

augroup filetype_cson
    autocmd!
    autocmd BufRead,BufNewFile *.cson set ft=coffee
augroup END

augroup filetype_javascript
    autocmd!
    autocmd FileType javascript nnoremap <buffer> <leader>f :!eslint --fix %<cr>
    autocmd FileType javascript nnoremap <buffer> <leader>c I//<space><esc>
    autocmd FileType javascript vnoremap <leader>/ <esc>`>a*/<esc>`<i/*<esc>
    autocmd FileType javascript nnoremap <leader>/ I//<esc>
    autocmd FileType javascript :iabbrev <buffer> fn function
    autocmd FileType javascript :iabbrev <buffer> pr prototype
    autocmd FileType javascript :iabbrev <buffer> clog console.log
    autocmd FileType javascript :iabbrev <buffer> cwarn console.warn
    autocmd FileType javascript :iabbrev <buffer> ret return
    autocmd FileType javascript,json,less setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
augroup END

augroup filetype_vim
    autocmd!
    autocmd FileType vim nnoremap <buffer> <leader>c I"<space><esc>
augroup END

augroup filetype_cpp
    autocmd!
    autocmd FileType cpp,c vnoremap <leader>/ <esc>`>a*/<esc>`<i/*<esc>
    autocmd FileType cpp,c nnoremap <leader>/ I//<esc>
    autocmd FileType cpp,c :iabbrev <buffer> ret return
    autocmd FileType cpp,c :iabbrev <buffer> hdg #ifndef _NEW_UNIT_H_<cr>#define _NEW_UNIT_H_<cr><cr><cr><cr>#endif /*_NEW_UNIT_H_*/<esc>gg2j:redraw!<cr>:%s/_NEW_UNIT_H_//g<left><left>
    "autocmd FileType cpp,c setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
augroup END

augroup filetype_html
    autocmd!
    autocmd FileType html setlocal expandtab shiftwidth=3 tabstop=3 softtabstop=3
augroup END

augroup strip_whitespace
    autocmd!
    "autocmd FileType javascript,vim,typescript,html,json,less,css,cpp,c autocmd BufWritePre <buffer> StripWhitespace
    "autocmd VimEnter * DisableWhitespace
augroup END

augroup fold_rules
    autocmd!
    autocmd BufRead * normal zR
augroup END

augroup vim_less
    autocmd!
    autocmd BufNewFile,BufRead *.less set filetype=less
    autocmd FileType less set omnifunc=csscomplete#CompleteCSS
augroup END
