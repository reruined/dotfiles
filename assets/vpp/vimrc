call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-fugitive'
Plug 'sjl/gundo.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'valloric/YouCompleteMe'
Plug 'valloric/listtoggle'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'tikhomirov/vim-glsl'
Plug 'ntpeters/vim-better-whitespace'
call plug#end()

" Basics
set nocompatible
set backspace=indent,eol,start
set lazyredraw
set hidden

" ctrlp
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_switch_buffer = 0

" ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<up>"
let g:UltiSnipsJumpForwardTrigger="<down>"

" vim-cpp-enhanced-highlight
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_class_scope_highlight = 1

" Enable filetype detection
filetype plugin indent on

" Sign column
set signcolumn=yes

" Enable mouse
set mouse=a

" Show partial commands
set showcmd

" Always show status line
set laststatus=2

" Better command-line completion
set wildmenu
set wildmode=longest,full

" Better completion
set omnifunc=syntaxcomplete#Complete

" Color scheme
set t_Co=256
set background=dark
colo gruvbox

" Swap
set swapfile
set directory=$HOME/.vim/swp//
call system('mkdir ' . &directory)

" Backup
set backup
set backupdir=$HOME/.vim/bak//
call system('mkdir ' . &backupdir)

" Undo
set undofile
set undodir=$HOME/.vim/undo//
set undolevels=1000
set undoreload=10000
call system('mkdir ' . &undodir)

" Longer history
set history=10000

" Detect changes from outside of vim
set autoread

" No timeout when cancelling command
set notimeout
set ttimeout
set ttimeoutlen=10

" Simple search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Relative line numbers
set number
set relativenumber
set numberwidth=6

" Highlight column
set colorcolumn=80

" Highlight current line, and change color in insert mode
set cursorline
augroup modehighlight
    autocmd!
    autocmd InsertEnter * :hi CursorLine ctermbg=16 | :hi CursorLineNr ctermbg=16
    autocmd InsertLeave * :hi CursorLine ctermbg=237 | :hi CursorLineNr ctermbg=237
augroup END

" YCM
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_global_ycm_extra_conf = $HOME.'/.vim/.ycm_extra_conf.py'

" Better indentation for CPP
augroup filetype_cpp
    autocmd!
    autocmd FileType cpp,c setlocal cindent cino=j1,(0,ws,Ws
augroup END

""" 
""" Mappings
""" --------------------------------------------

" Remap 0 (line start) and $ (line end) to H and L
nnoremap H 0
nnoremap L $
vnoremap H 0
vnoremap L $
nnoremap 0 <nop>
nnoremap $ <nop>

" Simpler mappings for navigating between and moving splits
nnoremap <silent> <c-h> :wincmd h<cr>
nnoremap <silent> <c-j> :wincmd j<cr>
nnoremap <silent> <c-k> :wincmd k<cr>
nnoremap <silent> <c-l> :wincmd l<cr>
nnoremap <silent> <M-left> :wincmd H<cr>
nnoremap <silent> <M-right> :wincmd L<cr>
nnoremap <silent> <M-up> :wincmd K<cr>
nnoremap <silent> <M-down> :wincmd J<cr>

" Disable arrow keys and Ctrl-C for interactive mode
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap  <nop>

" Set mapleader to space
let mapleader = "\<space>"
"nnoremap <space> <nop>

" Quick access to vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" EasyMotion
map <Leader> <Plug>(easymotion-prefix)

" Tagbar
nnoremap <silent> <F8> :TagbarToggle<cr>

" CtrlPTag
nnoremap <silent> <leader>p :CtrlPTag<cr>

" Test
nnoremap Ã¤ <C-\s>

" YCM
nnoremap <F9> :YcmCompleter FixIt<cr>
nnoremap <silent> <leader>go :YcmCompleter GoTo<cr>
nnoremap <silent> <leader>gt :YcmCompleter GetType<cr>
nnoremap <silent> <leader>gd :YcmCompleter GoToDeclaration<cr>

" Use dash and underscore to quickly move a line/selection up or down
nnoremap _ ddp==
nnoremap - ddkP==
vnoremap - <esc>`<kdd`>p`<v`>
vnoremap _ <esc>`>jdd`<P`<v`>

" links:
" https://www.reddit.com/r/vim/comments/5iz4cw/making_a_vim_setup_for_cc/
" https://www.quora.com/How-to-build-vim-editor-in-Linux-into-an-effective-C++-programming-IDE
" https://github.com/LucHermitte/lh-cpp
" https://github.com/universal-ctags/ctags
" https://github.com/LucHermitte/lh-tags
" http://www.vim.org/scripts/script.php?script_id=3465
" https://github.com/LucHermitte/clang_indexer/
" http://ffevotte.github.io/clang-tags/
" https://github.com/LucHermitte/vim-refactor
" http://www.vim.org/scripts/script.php?script_id=2975
" https://github.com/gilligan/vim-lldb
" https://sourceforge.net/projects/pyclewn/
" http://nosubstance.me/articles/2015-01-29-better-completion-for-cpp/
" https://github.com/kracejic/dotfiles
" https://os.ghalkes.nl/termdebug.html
" https://github.com/gregsexton/gitv
" http://linduxed.com/blog/2013/04/13/vim-plugins-why/
" https://github.com/VundleVim/Vundle.vim
